"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
require("babel-polyfill");
const fs = require("fs");
const string_decoder_1 = require("string_decoder");
function readTextFile(path) {
    return __awaiter(this, void 0, void 0, function* () {
        let stat = yield fileStat(path);
        let fd = null;
        let result;
        try {
            fd = yield openFile(path, "r");
            let buffer = new Buffer(maxBomLength);
            let readBomResult = yield readFile(fd, buffer, 0, maxBomLength, 0);
            let encodingInfo = getEncodingInfo(readBomResult.buffer);
            let decoder = new string_decoder_1.StringDecoder(encodingInfo.encoding);
            let textOffset = encodingInfo.bomLength;
            let textSize = stat.size - encodingInfo.bomLength;
            buffer = new Buffer(textSize);
            let readFileResult = yield readFile(fd, buffer, 0, textSize, encodingInfo.bomLength);
            result = decoder.write(readFileResult.buffer);
        }
        finally {
            if ((fd !== null) && (fd !== undefined)) {
                yield closeFile(fd);
            }
        }
        return result;
    });
}
exports.readTextFile = readTextFile;
function readTextFileSync(path) {
    let stat = fs.statSync(path);
    let fd = null;
    let result;
    try {
        fd = fs.openSync(path, "r");
        let buffer = new Buffer(maxBomLength);
        fs.readSync(fd, buffer, 0, maxBomLength, 0);
        let encodingInfo = getEncodingInfo(buffer);
        let decoder = new string_decoder_1.StringDecoder(encodingInfo.encoding);
        let textOffset = encodingInfo.bomLength;
        let textSize = stat.size - encodingInfo.bomLength;
        buffer = new Buffer(textSize);
        fs.readSync(fd, buffer, 0, textSize, encodingInfo.bomLength);
        result = decoder.write(buffer);
    }
    finally {
        if ((fd !== null) && (fd !== undefined)) {
            fs.closeSync(fd);
        }
    }
    return result;
}
exports.readTextFileSync = readTextFileSync;
function getEncodingInfo(buffer) {
    let encoding = defaultTextFileEncoding;
    let bomLength = 0;
    for (let bomMapItemName in bomMap) {
        let bomMapItem = bomMap[bomMapItemName];
        if (isBomMatch(bomMapItem, buffer)) {
            if ((typeof (bomMapItem.encoding) !== "string")) {
                throw new Error("Unsupported text file encoding");
            }
            bomLength = bomMapItem.bom.length;
            encoding = bomMapItem.encoding;
            break;
        }
    }
    return { encoding: encoding, bomLength: bomLength };
}
const utf8FileTextEncoding = "utf-8";
const defaultTextFileEncoding = utf8FileTextEncoding;
// TODO: support others? at least utf-16??
let bomMap = {
    bomUTF_8: { bom: [0xEF, 0xBB, 0xBF], encoding: utf8FileTextEncoding },
    bomUTF_16_BE: { bom: [0xFE, 0xFF], encoding: "" },
    bomUTF_16_LE: { bom: [0xFF, 0xFE], encoding: "" },
    bomUTF_32_BE: { bom: [0x00, 0x00, 0xFE, 0xFF], encoding: "" },
    bomUTF_32_LE: { bom: [0xFF, 0xFE, 0x00, 0x00], encoding: "" },
    bomUTF_7_a: { bom: [0x2B, 0x2F, 0x76, 0x38], encoding: "" },
    bomUTF_7_b: { bom: [0x2B, 0x2F, 0x76, 0x39], encoding: "" },
    bomUTF_7_c: { bom: [0x2B, 0x2F, 0x76, 0x2B], encoding: "" },
    bomUTF_7_d: { bom: [0x2B, 0x2F, 0x76, 0x2F], encoding: "" },
    bomUTF_7_e: { bom: [0x2B, 0x2F, 0x76, 0x38, 0x2D], encoding: "" },
    bomUTF_1: { bom: [0xF7, 0x64, 0x4C], encoding: "" },
    bomUTF_EBCDIC: { bom: [0xDD, 0x73, 0x66, 0x73], encoding: "" },
    bomSCSU: { bom: [0x0E, 0xFE, 0xFF], encoding: "" },
    bomBOCU_1: { bom: [0xFB, 0xEE, 0x28], encoding: "" },
    bomGB_18030: { bom: [0x84, 0x31, 0x95, 0x33], encoding: "" },
};
let maxBomLength = 0;
for (let bomMapItemName in bomMap) {
    let bomMapItem = bomMap[bomMapItemName];
    maxBomLength = Math.max(maxBomLength, bomMapItem.bom.length);
}
function isBomMatch(mapItem, bom) {
    if (bom.length < mapItem.bom.length) {
        return false;
    }
    for (let i = 0; i < mapItem.bom.length; i++) {
        if (bom[i] != mapItem.bom[i]) {
            return false;
        }
    }
    return true;
}
// TODO: share these, or try fs-promise (or similar)
function fileStat(path) {
    return new Promise(function (resolve, reject) {
        fs.stat(path, function (err, stats) {
            if ((null !== err) && (undefined !== err)) {
                reject(err);
            }
            else {
                resolve(stats);
            }
        });
    });
}
function openFile(path, flags) {
    return new Promise(function (resolve, reject) {
        fs.open(path, flags, function (err, fd) {
            if ((null !== err) && (undefined !== err)) {
                reject(err);
            }
            else {
                resolve(fd);
            }
        });
    });
}
function readFile(fd, buffer, offset, length, position) {
    return new Promise(function (resolve, reject) {
        fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer) {
            if ((null !== err) && (undefined !== err)) {
                reject(err);
            }
            else {
                resolve({ bytesRead: bytesRead, buffer: buffer });
            }
        });
    });
}
function closeFile(fd) {
    return new Promise(function (resolve, reject) {
        fs.close(fd, function (err) {
            if ((null !== err) && (undefined !== err)) {
                reject(err);
            }
            else {
                resolve();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,