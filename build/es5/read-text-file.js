"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
require("babel-polyfill");
var fs = require("fs");
var string_decoder_1 = require("string_decoder");
function readTextFile(path) {
    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
        var stat, fd, result, buffer, readBomResult, encodingInfo, decoder, textOffset, textSize, readFileResult;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return fileStat(path);

                    case 2:
                        stat = _context.sent;
                        fd = null;
                        result = void 0;
                        _context.prev = 5;
                        _context.next = 8;
                        return openFile(path, "r");

                    case 8:
                        fd = _context.sent;
                        buffer = new Buffer(maxBomLength);
                        _context.next = 12;
                        return readFile(fd, buffer, 0, maxBomLength, 0);

                    case 12:
                        readBomResult = _context.sent;
                        encodingInfo = getEncodingInfo(readBomResult.buffer);
                        decoder = new string_decoder_1.StringDecoder(encodingInfo.encoding);
                        textOffset = encodingInfo.bomLength;
                        textSize = stat.size - encodingInfo.bomLength;

                        buffer = new Buffer(textSize);
                        _context.next = 20;
                        return readFile(fd, buffer, 0, textSize, encodingInfo.bomLength);

                    case 20:
                        readFileResult = _context.sent;

                        result = decoder.write(readFileResult.buffer);

                    case 22:
                        _context.prev = 22;

                        if (!(fd !== null && fd !== undefined)) {
                            _context.next = 26;
                            break;
                        }

                        _context.next = 26;
                        return closeFile(fd);

                    case 26:
                        return _context.finish(22);

                    case 27:
                        return _context.abrupt("return", result);

                    case 28:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, this, [[5,, 22, 27]]);
    }));
}
exports.readTextFile = readTextFile;
function readTextFileSync(path) {
    var stat = fs.statSync(path);
    var fd = null;
    var result = void 0;
    try {
        fd = fs.openSync(path, "r");
        var buffer = new Buffer(maxBomLength);
        fs.readSync(fd, buffer, 0, maxBomLength, 0);
        var encodingInfo = getEncodingInfo(buffer);
        var decoder = new string_decoder_1.StringDecoder(encodingInfo.encoding);
        var textOffset = encodingInfo.bomLength;
        var textSize = stat.size - encodingInfo.bomLength;
        buffer = new Buffer(textSize);
        fs.readSync(fd, buffer, 0, textSize, encodingInfo.bomLength);
        result = decoder.write(buffer);
    } finally {
        if (fd !== null && fd !== undefined) {
            fs.closeSync(fd);
        }
    }
    return result;
}
exports.readTextFileSync = readTextFileSync;
function getEncodingInfo(buffer) {
    var encoding = defaultTextFileEncoding;
    var bomLength = 0;
    for (var bomMapItemName in bomMap) {
        var bomMapItem = bomMap[bomMapItemName];
        if (isBomMatch(bomMapItem, buffer)) {
            if (typeof bomMapItem.encoding !== "string") {
                throw new Error("Unsupported text file encoding");
            }
            bomLength = bomMapItem.bom.length;
            encoding = bomMapItem.encoding;
            break;
        }
    }
    return { encoding: encoding, bomLength: bomLength };
}
var utf8FileTextEncoding = "utf-8";
var defaultTextFileEncoding = utf8FileTextEncoding;
// TODO: support others? at least utf-16??
var bomMap = {
    bomUTF_8: { bom: [0xEF, 0xBB, 0xBF], encoding: utf8FileTextEncoding },
    bomUTF_16_BE: { bom: [0xFE, 0xFF], encoding: "" },
    bomUTF_16_LE: { bom: [0xFF, 0xFE], encoding: "" },
    bomUTF_32_BE: { bom: [0x00, 0x00, 0xFE, 0xFF], encoding: "" },
    bomUTF_32_LE: { bom: [0xFF, 0xFE, 0x00, 0x00], encoding: "" },
    bomUTF_7_a: { bom: [0x2B, 0x2F, 0x76, 0x38], encoding: "" },
    bomUTF_7_b: { bom: [0x2B, 0x2F, 0x76, 0x39], encoding: "" },
    bomUTF_7_c: { bom: [0x2B, 0x2F, 0x76, 0x2B], encoding: "" },
    bomUTF_7_d: { bom: [0x2B, 0x2F, 0x76, 0x2F], encoding: "" },
    bomUTF_7_e: { bom: [0x2B, 0x2F, 0x76, 0x38, 0x2D], encoding: "" },
    bomUTF_1: { bom: [0xF7, 0x64, 0x4C], encoding: "" },
    bomUTF_EBCDIC: { bom: [0xDD, 0x73, 0x66, 0x73], encoding: "" },
    bomSCSU: { bom: [0x0E, 0xFE, 0xFF], encoding: "" },
    bomBOCU_1: { bom: [0xFB, 0xEE, 0x28], encoding: "" },
    bomGB_18030: { bom: [0x84, 0x31, 0x95, 0x33], encoding: "" }
};
var maxBomLength = 0;
for (var bomMapItemName in bomMap) {
    var bomMapItem = bomMap[bomMapItemName];
    maxBomLength = Math.max(maxBomLength, bomMapItem.bom.length);
}
function isBomMatch(mapItem, bom) {
    if (bom.length < mapItem.bom.length) {
        return false;
    }
    for (var i = 0; i < mapItem.bom.length; i++) {
        if (bom[i] != mapItem.bom[i]) {
            return false;
        }
    }
    return true;
}
// TODO: share these, or try fs-promise (or similar)
function fileStat(path) {
    return new Promise(function (resolve, reject) {
        fs.stat(path, function (err, stats) {
            if (null !== err && undefined !== err) {
                reject(err);
            } else {
                resolve(stats);
            }
        });
    });
}
function openFile(path, flags) {
    return new Promise(function (resolve, reject) {
        fs.open(path, flags, function (err, fd) {
            if (null !== err && undefined !== err) {
                reject(err);
            } else {
                resolve(fd);
            }
        });
    });
}
function readFile(fd, buffer, offset, length, position) {
    return new Promise(function (resolve, reject) {
        fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer) {
            if (null !== err && undefined !== err) {
                reject(err);
            } else {
                resolve({ bytesRead: bytesRead, buffer: buffer });
            }
        });
    });
}
function closeFile(fd) {
    return new Promise(function (resolve, reject) {
        fs.close(fd, function (err) {
            if (null !== err && undefined !== err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,